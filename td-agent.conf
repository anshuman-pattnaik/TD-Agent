<system>
    log_level warn
</system>
  
<source>
    @type tail
    format none
    path /var/log/audit-alt.log
    path_key tailed_path
    pos_file /var/log/fluentd/tmp/audit-alt.log.pos
    tag audit
    rotate_wait 5
    refresh_interval 60
</source>
<filter audit>
    @type record_transformer
    <record>
        time_format /\D+ \d{1,2} \d{2}:\d{2}:\d{2}/
    </record>
</filter>
# For CentOS secure log
<source>
    @type tail
    format none
    path /var/log/secure
    path_key tailed_path
    pos_file /var/log/fluentd/tmp/secure.pos
    tag secure
    rotate_wait 5
    refresh_interval 60
</source>
<filter secure>
    @type record_transformer
    <record>
        time_format /\D+ \d{2} \d{2}:\d{2}:\d{2}/
    </record>
</filter>
# For Debian/Ubuntu auth log
<source>
    @type tail
    format none
    path /var/log/auth.log
    path_key tailed_path
    pos_file /var/log/fluentd/tmp/auth.pos
    tag auth
    rotate_wait 5
    refresh_interval 60
</source>
<filter auth>
    @type record_transformer
    <record>
        time_format /\D+ \d{2} \d{2}:\d{2}:\d{2}/
    </record>
</filter>
<filter *>
    @type record_transformer
    enable_ruby true
    <record>
        fqdn "#{Socket.gethostname}"
        ip_address "#{`hostname -i`}"
        aws_account_id "#{require 'net/http' ; require 'uri' ; uri = 
URI.parse("http://metadata.google.internal/computeMetadata/v1/project/project-id") ; request = Net::HTTP::Get.new(uri) ; 
request["Metadata-Flavor"] = "Google" ; req_options = {use_ssl: uri.scheme == "https", } ; response = Net::HTTP.start(uri.hostname, uri.port, 
req_options) do |http| http.request(request) end ; response.body}"
        log_file "${record['tailed_path']}"
        role "default"
        send_to_ES "true"
        send_to_S3 "false"
        siem_only "true"
    </record>
</filter>
<match *>
 @type http
    endpoint https://centralized-logs-ohio.tools.vonagenetworks.net:50000
    <format>
      @type json
    </format>
    json_array true
    headers {"agent-hash":"568b855a196511ebadc10242ac120002"}
    retryable_response_codes [503,408,504,502]
      <buffer>
        @type memory
          flush_interval 0.5
          chunk_limit_size 1m
          total_limit_size 128m
          queued_chunks_limit_size 128
          flush_thread_interval 0.1
          flush_thread_burst_interval 0.01
          flush_thread_count 15
          overflow_action throw_exception
          retry_timeout 60
          retry_max_times 6
          retry_wait 10
          disable_chunk_backup true
      </buffer>
</match>
